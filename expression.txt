(define isTwo
  (fun ([:a Int] [-> Bool])
    (if (eq? x 2)
      True
      Fasle)))
 
(define month
  (fun ([:a Int] [-> Int])
    (case n
      ((1) 31)
      ((2) 28)
      ((9) 50))))
 
 (typename [a :class (U Ord Num)])
 (define abs
  (fun ([:a T] [:b T] [-> a.type])
    (cond
      ((n > 0) n)
      (else (- n)))))

----------poly------------
(define $
  (fun (f x)
    (f x)))

($ f x)

(define add
  (fun (f b)
   (f b)))

-----------------这里进行证明
(add (assert (:f (Int –> Int)) 
             (:a Int)) 
             addInt 2)

----------------------------
(define gold
  (fun (x)
    (assert (goldbach-conjecture x))
    x))

(define bar
  (fun (z)
    (gold (assume (goldbach-conjecture x))
          (gold z))))
